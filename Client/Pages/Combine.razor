@using Client.Models
@using Client.Shared.API
@inject API APIServe

@page "/combine"

<div class="card">
    <div class="card-header text-center fs-2">
        Transform Data
    </div>

    <div class="card-body">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </div>
</div>

<div class="card">
  <div class="card-header">
    <ul class="nav nav-tabs card-header-tabs">
      <li class="nav-item">
        <a class="nav-link" style="color: black" href="/input">Input Data</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" style="color: black" href="/upload">Upload Data</a>
      </li>
      <li class="nav-item">
        <a class="nav-link active" aria-current="true" href="combine">Compose</a> 
      </li>
    </ul>
  </div>
  <div class="card-group">
    <div class="card" style="background-color: #d3d3d3">
      <div class="card-body">
        <label for="compPercent">Size:</label>
        <input id="compPercent" type="number" @bind="size" min="0" max="15" />
      </div>
    </div>

    <div class="card" style="background-color: #d3d3d3">
        <div class="card-body text-end">
            <button @onclick="CreateCompositeData" class="btn btn-primary">Submit</button>
        </div>
    </div>
  </div>
</div>

@if(composedData != null && composedData.Any())
{
    <div class="card">
        <div class="card-header text-center fs-4">
            Composite Signal
        </div>
        <div class="card-body text-center">
            <ScatterChart YVals="composedData" @key="composedData"/>
        </div>
    </div>

    @foreach(var data in allSignals)
    {
        <div class="card">
            <div class="card-header">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" role="switch" id="includeSignal" checked @onchange="() => UpdateCompositeData(data.Id)"/>
                </div>
            </div>
            <div class="card-group">
                <div class="card" style="background-color: #d3d3d3; max-width: 5%;">
                    <div class="card-body d-flex align-items-center">
                        <input id="includeGraph" type="number" @bind="data.Weight"/> 
                    </div>
                </div>
                <div class="card" style="background-color: #d3d3d3">
                    <div class="card-body text-center">
                        <ScatterChart YVals="data.Elements" @key="data"/>
                    </div>
                </div>
            </div>
            <div class="card-footer text-end">
                <button @onclick="() => UpdateSignal(data.Id)" class="btn btn-primary">Update</button>
            </div>
        </div>
    }
}


@code {
    private int[] composedData;
    private int[][] signals;
    private int size = 0;
    private List<Signal> allSignals = new List<Signal>();
    private List<Signal> includedSignals = new List<Signal>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void CreateCompositeData() 
    {

        @* (composedData, signals) = APIServe.Combine(size);
        for(int i = 0; i < size; i++)
        {
            Signal sig = new Signal
            {
                Elements = signals[i],
                Weight = 1
            };
            allSignals.Add(sig);
            includedSignals.Add(sig);
        } *@

        composedData = GenerateRandomArray();
        for(int i = 0; i < size; i++)
        {
            Signal sig = new Signal
            {
                Elements = GenerateRandomArray(),
                Weight = 1
            };
            allSignals.Add(sig);
            includedSignals.Add(sig);
        }
    }

    private void UpdateCompositeData(Guid id)
    {
        var signal = allSignals.FirstOrDefault(signal => signal.Id == id);
        if(includedSignals.Contains(signal))
        {
            includedSignals.Remove(signal);
        }
        else
        {
            includedSignals.Add(signal);
        }
        composedData = GenerateRandomArray();
    }

    private void UpdateSignal(Guid id)
    {

    }

    private int[] GenerateRandomArray()
    {
        int length = 10; // Default length of the array
        int minValue = 1; // Default minimum value
        int maxValue = 20; // Default maximum value

        Random random = new Random();
        int[] array = new int[length];
        for (int i = 0; i < length; i++)
        {
            array[i] = random.Next(minValue, maxValue + 1);
        }
        return array;
    }
}