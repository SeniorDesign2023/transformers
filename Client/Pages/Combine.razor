@using Client.Models

@page "/combine"

<div class="card">
    <div class="card-header text-center fs-2">
        Transform Data
    </div>

    <div class="card-body">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </div>
</div>

<div class="card">
  <div class="card-header">
    <ul class="nav nav-tabs card-header-tabs">
      <li class="nav-item">
        <a class="nav-link" style="color: black" href="/input">Input Data</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" style="color: black" href="/upload">Upload Data</a>
      </li>
      <li class="nav-item">
        <a class="nav-link active" aria-current="true" href="combine">Combine Data</a> 
      </li>
    </ul>
  </div>
  <div class="card-group">
    <div class="card" style="background-color: #d3d3d3">
      <div class="card-body">
          <label for="inputData">Enter your data:</label>
          <input id="inputData" @bind="dataString" />
      </div>
    </div>
    
    <div class="card" style="background-color: #d3d3d3">
      <div class="card-body">
        <label for="compPercent">Compression Percentage:</label>
        <input id="compPercent" type="number" @bind="compression" min="0" max="100" />
      </div>
    </div>

    <div class="card" style="background-color: #d3d3d3">
      <div class="card-body">
        <label for="truncData">Truncate Data:</label>
        <input type="checkbox" @bind="truncate"/>
      </div>
    </div>
  </div>

  <div class="card-footer text-end">
    <button @onclick="AddSignal" class="btn btn-primary">Add</button>
  </div>
</div>

@if(combinedData != null && combinedData.Any())
{
    <div class="card">
        <div class="card-header text-center fs-4">
            Combined Data
        </div>
        <div class="card-body text-center">
            <ScatterChart YVals="combinedData" @key="combinedData"/>
        </div>
    </div>

    @foreach(var data in signals)
    {
        <div class="card">
            <div class="card-header text-end">
                <button @onclick="() => RemoveSignal(data.Id)" class="oi oi-circle-x" aria-hidden="true" style="color: #8B0000"></button>
            </div>
            <div class="card-body text-center">
                <ScatterChart YVals="data.Elements" @key="data.Id"/>
            </div>
        </div>
    }
}

@code {
    private int[] combinedData;
    private string dataString;
    private int[] inputData;
    private bool truncate = false;
    private int compression = 0;
    private List<Data> signals = new List<Data>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void AddSignal() 
    {
        inputData = dataString.Split(',').Select(s => int.TryParse(s, out int result) ? result : 0).ToArray();
        Data temp = new Data
        {
            Elements = inputData,
            Truncate = truncate,
            Compression = compression
        };
        signals.Add(temp);
        @* combinedData = API.whatever(signals); *@
        combinedData = GenerateRandomArray(signals);
        StateHasChanged();
    }

    private void RemoveSignal(Guid id)
    {
        var signalToRemove = signals.FirstOrDefault(signal => signal.Id == id);
        if (signalToRemove != null)
        {
            signals.Remove(signalToRemove);
        }
        @* combinedData = API.whatever(signals); *@
        combinedData = GenerateRandomArray(signals);
        StateHasChanged();
    }

    private int[] GenerateRandomArray(List<Data> sigs)
    {
        if(sigs.Count < 1)
        {
            return null;
        }
        int length = 10; // Default length of the array
        int minValue = 1; // Default minimum value
        int maxValue = 20; // Default maximum value

        Random random = new Random();
        int[] array = new int[length];
        for (int i = 0; i < length; i++)
        {
            array[i] = random.Next(minValue, maxValue + 1);
        }
        return array;
    }
}