@using Client.Services
@using Client.Shared.API
@inject API APIServ
@inject SettingsService SettingsServe
@inject IFolderPicker FP

@page "/settings"

<div class="card">
    <div class="card-header text-center fs-2">
        Settings
    </div>

    <div class="card-group">
    <div class="card" style="background-color: #d3d3d3">
      <div class="card-body">
        <button @onclick="PickFolder">Choose Folder</button>
        @path
      </div>
    </div>
    
    <div class="card" style="background-color: #d3d3d3">
      <div class="card-body">
        <label for="numMatrices">Number of Hadimards (1-15):</label>
        <input id="numMatrices" type="number" @bind="matrices" min="1" max="15" />
      </div>
    </div>
  </div>

  <div class="card-footer text-end">
    <button @onclick="ChangeSettings" class="btn btn-primary">Submit</button>
  </div>
</div>

@if(changeSettings) 
{
    <div class="card">
        <div class="card-header fs-2">
            Settings Updated
        </div>
        <div class="card-body">
            <div>New Path: @path</div>
            <div>New Number of Matrices: @matrices</div>
        </div>
    </div>
}

@code {
    private string path = "No folder chosen";
    private int matrices = 1;
    private bool changeSettings = false;
    [Inject] private NavigationManager NavMan { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private async Task PickFolder()
    {
        try
        {
            path = await FP.PickFolder();
        }
        catch (Exception ex)
        {
            // Handle exception if needed
            path = "Error picking folder: " + ex.Message;
        }
    }
    private void ChangeSettings()
    {
        if(path == "No folder chosen") 
        {
            path = "C:\\temp\\DataFiles";
        }
        SettingsServe.SetSettings(path: path , m: matrices);
        APIServ.Initialize();
        changeSettings = true;
        StateHasChanged();
    }

}