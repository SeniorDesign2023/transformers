@page "/upload"

@using Client.Shared.API;
@inject API APIServe

<div class="card">
    <div class="card-header text-center fs-2">
        Transform Data
    </div>

    <div class="card-body">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
    </div>
</div>

<div class="card">
  <div class="card-header">
    <ul class="nav nav-tabs card-header-tabs">
      <li class="nav-item">
        <a class="nav-link" style="color: black" href="/input">Input Data</a>
      </li>
      <li class="nav-item">
        <a class="nav-link active" aria-current="true" href="/upload">Upload Data</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" style="color: black" href="combine">Inverse</a> 
      </li>
    </ul>
  </div>
  <div class="card-group">
    <div class="card" style="background-color: #d3d3d3">
      <div class="card-body">
          <InputFile OnChange="@UploadFile" multiple accept=".json" />
      </div>
    </div>
    
    <div class="card" style="background-color: #d3d3d3">
      <div class="card-body">
        <label for="compPercent">Compression Percentage:</label>
        <input id="compPercent" type="number" @bind="compression" min="0" max="100" />
      </div>
    </div>

    <div class="card" style="background-color: #d3d3d3">
      <div class="card-body">
        <label for="truncData">Truncate Data:</label>
        <input type="checkbox" @bind="truncate"/>
      </div>
    </div>
  </div>

  <div class="card-footer text-end">
    <button @onclick="SendData" class="btn btn-primary">Submit</button>
  </div>
</div>

@if (outputData != null && outputData.Any())
{
    <div class="card">
        <div class="card-header text-end"></div>
        <div class="card-body text-center">
            <ScatterChart YVals="outputData" @key="outputData" />
        </div>
    </div>
}



@code {
    private long maxFileSize = 1024 * 1024 * 3; // 3 MB
    private int maxAllowedFiles = 1;
    private List<string> errors = new();
    private string path = ".\\";
    private bool truncate = false;
    private int compression = 0;
    private int[] outputData;
    [Inject] private NavigationManager NavMan { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void SendData()
    {
        outputData = APIServe.ForwardHadamardTransform(path, truncate, compression);
        StateHasChanged();
        Console.WriteLine(path);
        Console.WriteLine(truncate);
        Console.WriteLine(compression);
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} Files are allowed");
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(), 
                Path.GetExtension(file.Name));

                string filepath = Path.Combine(
                    "C:\\temp", 
                    "DataFiles", 
                    newFileName);

                Directory.CreateDirectory(Path.Combine(
                    "C:\\temp", 
                    "DataFiles"));

                string fileExtension = Path.GetExtension(file.Name)?.ToLower();

                if (fileExtension != ".json")
                {
                    errors.Add($"Error: Attempting to upload incompatible file. Only json and csv are allowed");
                }
                else
                {
                    using (FileStream fs = new(filepath, FileMode.Create))
                    {
                        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                    }

                    path = filepath;
                    @* data = new int[] {1, 2, 3, 4, 5}; *@
                }
                
            } 
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }
        }

    }
    
}


