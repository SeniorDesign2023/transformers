@page "/upload"

@using Client.Shared.API;
@inject API APIServe

<h1>Upload Data</h1>

<div>
    <button @onclick="GoToHome">Home</button>
</div>

<div>
    <InputFile OnChange="@UploadFile" multiple accept=".json" />
</div>

<div>
    <label for="truncData">Truncate Data:</label>
    <input type="checkbox" @bind="truncate"/>
</div>

<div>
    <label for="compPercent">Compression Percentage (0-100):</label>
    <input id="compPercent" type="number" @bind="compression" min="0" max="100" />
    <button @onclick="SendData">Submit</button>
</div>

@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@if (outputData != null)
{
    <p> Graph the data </p>
    <ScatterChart YVals="outputData" @key="outputData" />
}

@code {
    private long maxFileSize = 1024 * 1024 * 3; // 3 MB
    private int maxAllowedFiles = 1;
    private List<string> errors = new();
    private string path = ".\\";
    private bool truncate = false;
    private int compression = 0;
    private int[] outputData;
    [Inject] private NavigationManager NavMan { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void GoToHome()
    {
        NavMan.NavigateTo("/");
    }

    private void SendData()
    {
        @* outputData = APIServe.forwardHadamardTransform(path, truncate, compression); *@
        @* StateHasChanged(); *@
        Console.WriteLine(path);
        Console.WriteLine(truncate);
        Console.WriteLine(compression);
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        errors.Clear();

        if (e.FileCount > maxAllowedFiles)
        {
            errors.Add($"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} Files are allowed");
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(), 
                Path.GetExtension(file.Name));

                string filepath = Path.Combine(
                    "C:\\temp", 
                    "DataFiles", 
                    newFileName);

                Directory.CreateDirectory(Path.Combine(
                    "C:\\temp", 
                    "DataFiles"));

                string fileExtension = Path.GetExtension(file.Name)?.ToLower();

                if (fileExtension != ".json")
                {
                    errors.Add($"Error: Attempting to upload incompatible file. Only json and csv are allowed");
                }
                else
                {
                    using (FileStream fs = new(filepath, FileMode.Create))
                    {
                        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                    }

                    path = filepath;
                    @* data = new int[] {1, 2, 3, 4, 5}; *@
                }
                
            } 
            catch (Exception ex)
            {
                errors.Add($"File: {file.Name} Error: {ex.Message}");
            }
        }

    }
    
}


